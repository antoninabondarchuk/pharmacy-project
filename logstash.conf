input {
    file {
        path => "/config-dir/new_drugs/*.csv"
        start_position => "beginning"
        sincedb_path => "/dev/null"

    }
}

filter {
    date {
             match => ["registration_date", "YYYY-mm-dd"]
    }
    date {
             match => ["premature_termination.date", "YYYY-mm-dd"]
    }
    csv {
        separator => ";"
        columns => [
            "source_id",
            "trade_name",
            "international_name.name",
            "drug_form",
            "marketing_status.name",
            "formula",
            "pharmacotherapeutic_group.name",
            "atc1name",
            "atc2name",
            "atc3name",
            "drug_applicant.name",
            "drug_applicant.country_id.name",
            "drug_applicant.address",
            "manufacturer1name",
            "manufacturer1countryname",
            "manufacturer1address",
            "manufacturer2name",
            "manufacturer2countryname",
            "manufacturer2address",
            "manufacturer3name",
            "manufacturer3countryname",
            "manufacturer3address",
            "manufacturer4name",
            "manufacturer4countryname",
            "manufacturer4address",
            "manufacturer5name",
            "manufacturer5countryname",
            "manufacturer5address",
            "registration_number",
            "registration_date",
            "expiration_date",
            "drug_type.name",
            "has_bio_origin",
            "has_phyto_origin",
            "is_orphan",
            "is_homeopatic",
            "INN.name",
            "premature_termination.date",
            "premature_termination.reason",
            "instruction_url"
        ]
        remove_field => [
            "@timestamp",
            "message",
            "@version",
            "host",
            "path"
        ]
    }
    ruby {
        code => '
            atcs_arr = []
            unless (event.get("atc1name").nil? && event.get("atc1type").nil?)
                atcs_arr << {"name": event.get("atc1name"), "type": 1}
            end
            unless (event.get("atc2name").nil? && event.get("atc2type").nil?)
                atcs_arr << {"name": event.get("atc2name"), "type": 2}
            end
            unless (event.get("atc3name").nil? && event.get("atc3type").nil?)
                atcs_arr << {"name": event.get("atc3name"), "type": 3}
            end
            event.set("atcs", atcs_arr)

            manufacturers_arr = []
            unless (event.get("manufacturer1name").nil? && event.get("manufacturer1address").nil? && \
                event.get("manufacturer1countryname").nil?)
                manufacturers_arr << {"name": event.get("manufacturer1name"), "address": \
                    event.get("manufacturer1address"), "country_id": {"name": event.get("manufacturer1countryname")}}
            end
            unless (event.get("manufacturer2name").nil? && event.get("manufacturer2address").nil? && \
                event.get("manufacturers2countryname").nil?)
                manufacturers_arr << {"name": event.get("manufacturer2name"), "address": \
                    event.get("manufacturer2address"), "country_id": {"name": event.get("manufacturer2countryname")}}
            end
            unless (event.get("manufacturer3name").nil? && event.get("manufacturer3address").nil? && \
                event.get("manufacturer3countryname").nil?)
                manufacturers_arr << {"name": event.get("manufacturer3name"), "address": \
                    event.get("manufacturer3address"), "country_id": {"name": event.get("manufacturer3countryname")}}
            end
            unless (event.get("manufacturer4name").nil? && event.get("manufacturer4address").nil? && \
                event.get("manufacturer4countryname").nil?)
                manufacturers_arr << {"name": event.get("manufacturer4name"), "address": \
                    event.get("manufacturer4address"), "country_id": {"name": event.get("manufacturer4countryname")}}
            end
            unless (event.get("manufacturer5name").nil? && event.get("manufacturer5address").nil? && \
                event.get("manufacturers5countryname").nil?)
                manufacturers_arr << {"name": event.get("manufacturer5name"), "address": \
                    event.get("manufacturer5address"), "country_id": {"name": event.get("manufacturer5countryname")}}
            end
            event.set("manufacturers", manufacturers_arr)
        '
        remove_field => [
            "atc1name",
            "atc2name",
            "atc3name",
            "atc1type",
            "atc2type",
            "atc3type",
            "manufacturer1name",
            "manufacturer1address",
            "manufacturer1countryname",
            "manufacturer2name",
            "manufacturers2address",
            "manufacturer2countryname",
            "manufacturer3name",
            "manufacturer3address",
            "manufacturer3countryname",
            "manufacturer4name",
            "manufacturer4address",
            "manufacturer4countryname",
            "manufacturer5name",
            "manufacturer5address",
            "manufacturer5countryname"
        ]
    }
}

output {
   elasticsearch {
      codec => json
      hosts => "elasticsearch:9200"
      index => "drugs"
   }
   stdout {
       codec => rubydebug
   }
}
